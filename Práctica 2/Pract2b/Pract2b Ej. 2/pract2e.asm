; Autor: Rubén García de la Fuente
; Grupo 2301
; Práctica 2, ejercicio e
NUM_VECTORES EQU 4 ; AQUI INDICAMOS EL NUMERO DE VECTORES QUE VAMOS A ANALIZAR
NUM_COMPONENTES EQU 4 ; INDICAMOS EL NUMERO DE ELEMENTOS EN CADA VECTOR
NUM_TOTAL_ELEMENTOS EQU NUM_VECTORES * NUM_COMPONENTES ; NUMERO TOTAL DE ELEMENTOS SUMANDO TODOS LOS VECTORES
NUM_MAXIMO_DE_COMPONENTE EQU 4 ; LIMITE SUPERIOR QUE PUEDEN TOMAR LOS ELEMENTOS
NUM_MINIMO_DE_COMPONENTE EQU 1 ; LIMITE INFERIOR QUE PUEDEN TOMAR LOS ELEMENTOS
; DEFINICION DEL SEGMENTO DE DATOS
DATOS SEGMENT
    vector1 db ?,?,?,?
    vector2 db ?,?,?,?
    vector3 db ?,?,?,?
    vector4 db ?,?,?,?
    conversionASCI DB " ", 13, 10, '$' ; CADENA DONDE SE VAN A GUARDAR LAS CONVERSIONES DE LOS NUMEROS
    pideVector DB "INTRODUZCA UN VECTOR (EJ.: 1 2 3 4): $"
    vectorError DB "VECTOR INCORRECTO", 13, 10, '$'
    vectorIntroducido DB 10 DUP (?)
    imprimirFilasSI DB "FILAS VALIDAS", 13, 10, '$'
    imprimirFilasNO DB "FILAS NO VALIDAS", 13, 10, '$'
    imprimirColumnasSI DB "COLUMNAS VALIDAS", 13, 10, '$'
    imprimirColumnasNO DB "COLUMNAS NO VALIDAS", 13, 10, '$'
    imprimirRegionesSI DB "REGIONES VALIDAS $"
    imprimirRegionesNO DB "REGIONES NO VALIDAS $"

DATOS ENDS
;**************************************************************************
; DEFINICION DEL SEGMENTO DE PILA
PILA SEGMENT STACK "STACK"
    DB 40H DUP (0) ;ejemplo de inicialización, 64 bytes inicializados a 0
PILA ENDS
;**************************************************************************
; DEFINICION DEL SEGMENTO EXTRA
EXTRA SEGMENT
EXTRA ENDS
;**************************************************************************
; DEFINICION DEL SEGMENTO DE CODIGO
CODE SEGMENT
ASSUME CS: CODE, DS: DATOS, ES: EXTRA, SS: PILA
    ; COMIENZO DEL PROCEDIMIENTO PRINCIPAL
    INICIO PROC
        ; INICIALIZA LOS REGISTROS DE SEGMENTO CON SU VALOR
        MOV AX, DATOS
        MOV DS, AX
        MOV AX, PILA
        MOV SS, AX
        MOV AX, EXTRA
        MOV ES, AX
        MOV SP, 64 ; CARGA EL PUNTERO DE PILA CON EL VALOR MAS ALTO
        ; FIN DE LAS INICIALIZACIONES
        ; COMIENZO DEL PROGRAMA
        CALL SOLICITA_VECTORES
        CALL IMPRIME_MATRIZ
        CALL COMPRUEBA_FILAS
        CALL COMPRUEBA_COLUMNAS
        CALL COMPRUEBA_REGIONES
        ; FIN DEL PROGRAMA
        MOV AX, 4C00H
        INT 21H

    INICIO ENDP
    ;ESPACIO PARA SUBRUTINAS
    SOLICITA_VECTORES PROC NEAR
        MOV SI, 0 ; SI HACE REFERENCIA AL VECTOR DE LA MATRIZ
        MOV AH, 2H
        MOV DL, 13
        INT 21H
        MOV AH, 2H
        MOV DL, 10
        INT 21H ; IMPRIMIMOS NUEVA LINEA
      LEEVECTOR:
        MOV CH, 0 ; CH HACE REFERENCIA A LA POSICION DEL VECTOR DESTINO
        MOV CL, 2 ; CL HACE REFERENCIA A LA POSICION DEL VECTOR ORIGEN
        MOV AH, 9
        MOV DX, OFFSET pideVector
        INT 21H ; IMPRIMIMOS EL MENSAJE DE PEDIR VECTOR
        MOV AH, 0AH
        MOV DX, OFFSET vectorIntroducido
        MOV vectorIntroducido[0], 8
        INT 21H ; RECIBIMOS EL VECTOR POR PANTALLA
        MOV AH, 2H
        MOV DL, 13
        INT 21H
        MOV AH, 2H
        MOV DL, 10
        INT 21H ; IMPRIMIMOS NUEVA LINEA
        CMP vectorIntroducido[1], 7 ; COMPARAMOS LA ENTRADA CON EL NUMERO DE CARACTERES ESPERADO
        JNE ERRORS ; SI NO COINCIDEN DEVOLVEMOS ERROR
        JE CONVIERTEVECTOR
      CONVIERTEVECTOR:
        MOV DL, CL
        MOV DH, 0
        MOV BX, DX
        MOV AL, vectorIntroducido[BX] ; PASAMOS EL NUMERO AL REGISTRO AL
        SUB AL, 30H ; PASAMOS EL NUMERO DE ASCII A HEXADECIMAL
        MOV DL, CH
        MOV DH, 0
        MOV BX, DX
        MOV vector1[SI][BX], AL ; COPIAMOS EL NUMERO EN EL VECTOR CORRESPONDIENTE
        JMP NEXTPOS
      NEXTPOS:
        INC CH
        INC CL
        CMP CH, NUM_COMPONENTES ; COMPARAMOS EL INDICE CON EL NUMERO DE COMPONENTES
        JE LEENEXTVECTOR ; SI SON IGUALES PASAMOS AL SIGUIENTE VECTOR
        MOV DL, CL
        MOV DH, 0
        MOV BX, DX
        CMP vectorIntroducido[BX], 20H ; MIRAMOS SI LA SIGUIENTE POSICION A UN NUMERO ES UN ESPACIO
        JNE ERRORS ; SI NO LO ES DEVOLVEMOS ERROR
        INC CL
        JMP CONVIERTEVECTOR
      LEENEXTVECTOR:
        ADD SI, NUM_COMPONENTES ; PASAMOS AL SIGUIENTE VECTOR
        CMP SI, NUM_TOTAL_ELEMENTOS ; SI SI ES IGUAL AL NUMERO TOTAL DE ELEMENTOS TERMINAMOS
        JNE LEEVECTOR
        JE FINS
      ERRORS: ; CODIGO DE ERROR
        MOV AH, 9
        MOV DX, OFFSET vectorError
        INT 21H ; IMPIRMIMOS EL ERROR
        MOV AX, 4C00H
        INT 21H ; FINALIZAMOS LA EJECUCION DEL PROGRAMA
      FINS:
        RET
    SOLICITA_VECTORES ENDP

    IMPRIME_MATRIZ PROC NEAR
        MOV SI, 0 ; SI REFERENCIA AL VECTOR DENTRO DE LA MATRIZ
      BUCLEI:
        MOV BP, 0 ; BP HACE REFERENCIA A LA POSICION DEL VECTOR DENTRO DE LA MATRIZ
      IMPRESION:
        MOV AH, 2H
        MOV DL, ' '
        INT 21H ; IMPRIMIMOS UN ESPACIO
        MOV DL, 0
        MOV DL, vector1[SI][BP]
        ADD DL, 30H
        MOV AH, 2H ; IMPRIMIMOS LA POSICION DE LA MATRIZ
        INT 21H
        INC BP
        CMP BP, NUM_COMPONENTES ; COMARAMOS BP CON EL NUMERO DE COMPONENTES
        JE FINI ; SI SON IGUALES VAMOS A FINI
        JNE IMPRESION ; SI NO SON IGUALES IMPIRMIMOS LA SIGUIENTE COMPONENTE
      FINI:
        MOV AH, 2H
        MOV DL, 13
        INT 21H
        MOV AH, 2H
        MOV DL, 10
        INT 21H ; IMPRIMIMOS NUEVA LINEA
        ADD SI, NUM_COMPONENTES
        CMP SI, NUM_TOTAL_ELEMENTOS ; COMPRAMOS SI CON EL NUMERO TOTAL DE ELEMENTOS
        JNE BUCLEI ; SI NO SON IGUALES PASAMOS AL SIGUIENTE VECTOR
        RET ; SI SON IGUALES RETORNAMOS
    IMPRIME_MATRIZ ENDP

    COMPRUEBA_FILAS PROC NEAR
        MOV SI, 0 ; SI REFERENCIA AL VECTOR DENTRO DE LA MATRIZ (INICIALMENTE A 0)
      BUCLEF: ; ESTE ES EL BUCLE PRINCIPAL QUE EJECUTA CADA VECTOR DE LA MATRIZ
        MOV AL, 1 ; AL REFERENCIA A LOS NUMEROS DE REFERENCIA QUE TIENEN QUE ESTAR DENTRO DEL CONJUNTO
        MOV BX, 0 ; BX REFERENCIA A LA POSICION DE CADA VECTOR
        MOV BP, 0 ; BP REFERENCIA LAS POSICIONES ANTERIORES A BX
      NUMDIF: ; COMPROBACION DE PERNENCIA DEL NUMERO AL CONJUNTO
        CMP AL, vector1[SI][BX] ; COMPARAMOS EL NUMERO DE REFERENCIA CON LA POSICION DEL VECTOR
        JNE NEXTAL ; SI NO COINCIDEN PASAMOS A LA SIGUIENTE COMPROBACION DE PERTENENCIA
        CMP BX, 0 ; SI COINCIDEN COMPARAMOS LA POSICION BX CON 0
        JE NEXTBXF ; SI COINCIDEN NO PODEMOS REALIZAR LA COMPROBACION DE REPETICIONES Y PASAMOS A LA SIGUIENTE POSICION DEL VECTOR
        JNE NUMREPF ; SI NO COINCIDEN REALIZAMOS LA COMPROBACION DE REPETICIONES
      NUMREPF: ; COMPROBACION DE REPETICIONES
        MOV AH, vector1[SI][BP]
        CMP AH, vector1[SI][BX] ; COMPARAMOS SI COINCIDEN LOS NUMEROS DADOS (SI HAY REPETICION)
        JNE NEXTBPF ; SI NO COINCIDEN PASAMOS A LA SIGUIENTE COMPROBACION DE REPETICION
        JE ERRORF ; SI COINCIDEN ESCRIBIMOS EL ERROR POR PANTALLA
      NEXTAL: ; PASAMOS A LA SIGUIENTE COMPROBACION DE PERTENENCIA
        INC AL
        CMP AL, 5 ; COMPARAMOS EL NUMERO DE REFERENCIA CON EL LIMITE DEL CONJUNTO
        JNE NUMDIF ; SI NO COINCIDEN PASAMOS A LA SIGUIENTE COMPROBACION DE PERTENENCIA
        JE ERRORF ; SI COINCIDEN IMPRIMIMOS EL ERROR POR PANTALLA
      NEXTBXF: ; PASAMOS A LA SIGUIENTE POSICION DEL VECTOR
        MOV AL, 1
        MOV BP, 0
        INC BX
        CMP BX, NUM_COMPONENTES ; COMPROBAMOS SI HEMOS COMPARADO TODAS LAS POSICIONES DEL VECTOR
        JNE NUMDIF ; SI NO HEMOS COMPARADO TODAS PASAMOS A LA SIGUIENTE POSICION
        JE NEXTVECTOR ; SI HEMOS COMPARADO TODAS PASAMOS AL SIGUIENTE VECTOR
      NEXTBPF: ; PASAMOS A LA SIGUIENTE COMPROBACION DE REPETICION
        INC BP
        CMP BX, BP ; COMPROBAMOS SI BP Y BX SON IGUALES
        JE NEXTBXF ; SI LO SON PASAMOS A LA SIGUIENTE POSICION DEL VECTOR
        JMP NUMDIF ; SI NO LO SON REALIZAMOS LA SIGUIENTE COMPROBACION DE PERTENENCIA DEL BP SUCESOR
      CORRECTOF: ; IMPRIMIMOS EL MENSAJE DE SALIDA CORRECTA POR PANTALLA
        MOV AH, 9
        MOV DX, OFFSET imprimirFilasSI
        INT 21H
        JMP FINF ; SALTAMOS AL FIN DEL BUCLE PRINCIPAL
      ERRORF: ; IMPRIMIMOS EL MENSAJE DE ERROR POR PANTALLA
        MOV AH, 9
        MOV DX, OFFSET imprimirFilasNO
        INT 21H
        JMP FINF ; SALTAMOS AL FIN DEL BUCLE PRINCIPAL
      NEXTVECTOR: ; FIN DEL BUCLE PRINCIPAL
        ADD SI, NUM_COMPONENTES
        CMP SI, NUM_TOTAL_ELEMENTOS ; COMPROBAMOS SI HEMOS COMPARADO TODOS LOS VECTORES DE LA MATRIZ
        JNE BUCLEF ; SI NO HEMOS COMPARADO TODOS PASAMOS AL SIGUIENTE VECTOR
        JE CORRECTOF ; SI HEMOS TERMINADO IMPRIMIMOS CORRECTO
      FINF:
        RET ; SI HEMOS COMPARADO TODOS RETORNAMOS
    COMPRUEBA_FILAS ENDP

    COMPRUEBA_COLUMNAS PROC NEAR
        MOV SI, 0 ; SI REFERENCIA A LA COLUMNA DENTRO DE LA MATRIZ (INICIALMENTE A 0)
      BUCLEC: ; ESTE ES EL BUCLE PRINCIPAL QUE EJECUTA CADA VECTOR DE LA MATRIZ
        MOV BX, NUM_COMPONENTES ; BX REFERENCIA A LA POSICION DE CADA VECTOR
        MOV BP, 0 ; BP REFERENCIA LAS POSICIONES ANTERIORES A BX
      NUMREPC: ; COMPROBACION DE REPETICIONES
        MOV AH, vector1[SI][BP]
        CMP AH, vector1[SI][BX] ; COMPARAMOS SI COINCIDEN LOS NUMEROS DADOS (SI HAY REPETICION)
        JNE NEXTBPC ; SI NO COINCIDEN PASAMOS A LA SIGUIENTE COMPROBACION DE REPETICION
        JE ERRORC ; SI COINCIDEN ESCRIBIMOS EL ERROR POR PANTALLA
      NEXTBXC: ; PASAMOS A LA SIGUIENTE POSICION DE LA COLUMNA
        MOV BP, 0
        ADD BX, NUM_COMPONENTES
        CMP BX, NUM_TOTAL_ELEMENTOS ; COMPROBAMOS SI HEMOS COMPARADO TODAS LAS POSICIONES DE LA COLUMNA
        JNE NUMREPC ; SI NO HEMOS COMPARADO TODAS PASAMOS A LA SIGUIENTE POSICION
        JE NEXTCOLUMN ; SI HEMOS COMPARADO TODAS PASAMOS A LA SIGUIENTE COLUMNA
      NEXTBPC: ; PASAMOS A LA SIGUIENTE COMPROBACION DE REPETICION
        ADD BP, NUM_COMPONENTES
        CMP BX, BP ; COMPROBAMOS SI BP Y BX SON IGUALES
        JE NEXTBXC ; SI LO SON PASAMOS A LA SIGUIENTE POSICION DE LA COLUMNA
        JMP NUMREPC ; SI NO LO SON REALIZAMOS LA SIGUIENTE COMPARACION
      CORRECTOC: ; IMPRIMIMOS EL MENSAJE DE SALIDA CORRECTA POR PANTALLA
        MOV AH, 9
        MOV DX, OFFSET imprimirColumnasSI
        INT 21H
        JMP FINF ; SALTAMOS AL FIN DEL BUCLE PRINCIPAL
      ERRORC: ; IMPRIMIMOS EL MENSAJE DE ERROR POR PANTALLA
        MOV AH, 9
        MOV DX, OFFSET imprimirColumnasNO
        INT 21H
        JMP FINF ; SALTAMOS AL FIN DEL BUCLE PRINCIPAL
      NEXTCOLUMN: ; FIN DEL BUCLE PRINCIPAL
        INC SI
        CMP SI, NUM_COMPONENTES ; COMPROBAMOS SI HEMOS COMPARADO TODAS LAS COLUMNAS DE LA MATRIZ
        JNE BUCLEC ; SI NO HEMOS COMPARADO TODOS PASAMOS A LA SIGUIENTE COLUMNA
        JE CORRECTOC ; SI HEMOS TERMINADO IMPRIMIMOS CORRECTO
      FINC:
        RET ; SI HEMOS COMPARADO TODOS RETORNAMOS
    COMPRUEBA_COLUMNAS ENDP

    COMPRUEBA_REGIONES PROC NEAR
        MOV SI, 0 ; SI REFERENCIA A LA COLUMNA DENTRO DE LA MATRIZ (INICIALMENTE A 0)
      BUCLER: ; ESTE ES EL BUCLE PRINCIPAL QUE EJECUTA CADA VECTOR DE LA MATRIZ
        MOV BX, 5 ; BX REFERENCIA A LA POSICION DE CADA VECTOR
        MOV BP, 0 ; BP REFERENCIA LAS POSICIONES ANTERIORES A BX
      NUMREP1: ; COMPRBAMOS LA PRIMERA DIAGONAL
        MOV AH, vector1[SI][BP]
        CMP AH, vector1[SI][BX] ; COMPARAMOS SI COINCIDEN LOS NUMEROS DADOS (SI HAY REPETICION)
        JNE NUMREP2 ; SI NO COINCIDEN PASAMOS A LA SIGUIENTE DIAGONAL
        JE ERRORR ; SI COINCIDEN ESCRIBIMOS EL ERROR POR PANTALLA
      NUMREP2: ; COMPROBAMOS LA SEGUNDA DIAGONAL
        INC BP
        DEC BX
        MOV AH, vector1[SI][BP]
        CMP AH, vector1[SI][BX] ; COMPARAMOS SI COINCIDEN LOS NUMEROS DADOS (SI HAY REPETICION)
        JNE NEXTREGION ; SI NO COINCIDEN PASAMOS A LA SIGUIENTE REGION
        JE ERRORR ; SI COINCIDEN ESCRIBIMOS EL ERROR POR PANTALLA
      CORRECTOR: ; IMPRIMIMOS EL MENSAJE DE SALIDA CORRECTA POR PANTALLA
        MOV AH, 9
        MOV DX, OFFSET imprimirRegionesSI
        INT 21H
        JMP FINR ; SALTAMOS AL FIN DEL BUCLE PRINCIPAL
      ERRORR: ; IMPRIMIMOS EL MENSAJE DE ERROR POR PANTALLA
        MOV AH, 9
        MOV DX, OFFSET imprimirRegionesNO
        INT 21H
        JMP FINR ; SALTAMOS AL FIN DEL BUCLE PRINCIPAL
      NEXTREGION:
        CMP SI, 0 ; COMPROBAMOS SI SI ESTA EN LA PRIMERA REGION
        JNE REGION2 ; SI NO LO ESTA COMPROBAMOS SI ESTA EN LA SEGUNDA
        ADD SI, 2 ; SI LO ESTA PASAMOS A LA SIGUIENTE REGION
        JMP BUCLER
      REGION2:
        CMP SI, 2 ; COMPROBAMOS SI SI ESTA EN LA SEGUNDA REGION
        JNE REGION3 ; SI NO LO ESTA COMPROBAMOS SI ESTA EN LA TERCERA
        ADD SI, 6 ; SI LO ESTA PASAMOS A LA SIGUIENTE REGION
        JMP BUCLER
      REGION3:
        CMP SI, 8 ; COMPROBAMOS SI SI ESTA EN LA TERCERA REGION
        JNE CORRECTOR ; SI NO LO ESTA HEMOS TERMINADO CORRECTAMENTE LA EJECUCION
        ADD SI, 2 ; SI LO ESTA PASAMOS A LA SIGUIENTE REGION
        JMP BUCLER
      FINR:
        RET ; SI HEMOS COMPARADO TODOS RETORNAMOS
    COMPRUEBA_REGIONES ENDP
    ; FIN DEL SEGMENTO DE CODIGO
CODE ENDS
; FIN DEL PROGRAMA INDICANDO DONDE COMIENZA LA EJECUCION
END INICIO
