; Autor: Rubén García de la Fuente
; Grupo 2301
; Práctica 2, ejercicio b

; DEFINICION DEL SEGMENTO DE DATOS
DATOS SEGMENT
    ; DEFINICION DE LOS VECTORES
    vector1 db 1,2,2,4
    vector2 db 4,2,5,1
    vector3 db 3,2,4,1
    errorRep DB "REPETICION", 13, 10, '$'
    salidaCorrecta DB "CORRECTO", 13, 10, '$'

DATOS ENDS
;**************************************************************************
; DEFINICION DEL SEGMENTO DE PILA
PILA SEGMENT STACK "STACK"
    DB 40H DUP (0) ;ejemplo de inicialización, 64 bytes inicializados a 0
PILA ENDS
;**************************************************************************
; DEFINICION DEL SEGMENTO EXTRA
EXTRA SEGMENT
    RESULT DW 0,0 ;ejemplo de inicialización. 2 PALABRAS (4 BYTES)
EXTRA ENDS
;**************************************************************************
; DEFINICION DEL SEGMENTO DE CODIGO
CODE SEGMENT
    ASSUME CS: CODE, DS: DATOS, ES: EXTRA, SS: PILA
    ; COMIENZO DEL PROCEDIMIENTO PRINCIPAL
    INICIO PROC
        ; INICIALIZA LOS REGISTROS DE SEGMENTO CON SU VALOR
        MOV AX, DATOS
        MOV DS, AX
        MOV AX, PILA
        MOV SS, AX
        MOV AX, EXTRA
        MOV ES, AX
        MOV SP, 64 ; CARGA EL PUNTERO DE PILA CON EL VALOR MAS ALTO
        ; FIN DE LAS INICIALIZACIONES
        ; COMIENZO DEL PROGRAMA
        CALL COMPROBACION
        ; FIN DEL PROGRAMA
        MOV AX, 4C00H
        INT 21H

    INICIO ENDP
    ;ESPACIO PARA SUBRUTINAS
    COMPROBACION PROC NEAR ; PROCESO QUE COMPRUEBA LA REPETICION DE NUMEROS EN MATRICES
        MOV SI, 0 ; SI REFERENCIA AL VECTOR DENTRO DE LA MATRIZ (INICIALMENTE A 0)
      BUCLE1: ; ESTE ES EL BUCLE QUE EJECUTA CADA VECTOR DE LA MATRIZ
        MOV BX, 1 ; BX REFERENCIA LA POSICION DE CADA VECTOR (LA INICIAMOS A 1 PUES EN BX 0 NO PODEMOS COMPARAR REPETICIONES)
        MOV BP, 0 ; BP REFERENCIA LAS POSICIONES ANTERIORES A BX
      BUCLE2: ; ESTE ES EL BUCLE DE COMPROBACION DE REPETICIONES
        MOV AL, vector1[SI][BP]
        CMP AL, vector1[SI][BX] ; COMPARAMOS SI COINCIDEN LOS NUMEROS DADOS (SI HAY REPETICION)
        JNE NEXT ; SI NO COINCIDEN PASAMOS A LA SIGUIENTE COMPROBACION
        JE ERROR ; SI COINCIDEN ESCRIBIMOS EL ERROR POR PANTALLA
      NEXT: ; PASAMOS A LA SIGUIENTE COMPROBACION
        INC BP
        CMP BX, BP ; COMPROBAMOS SI BP Y BX SON IGUALES
        JE NEXTBX ; SI LO SON PASAMOS A LA SIGUIENTE POSICION DEL VECTOR
        JMP BUCLE2 ; SI NO LO SON REALIZAMOS LA COMPROBACION DEL BP SUCESOR
      NEXTBX: ; PASAMOS A LA SIGUIENTE POSICION DEL VECTOR
        MOV BP, 0
        INC BX
        CMP BX, 4 ; COMPROBAMOS SI HEMOS COMPARADO TODAS LAS POSICONES DEL VECTOR
        JNE BUCLE2 ; SI NO HEMOS COMPARADO TODAS PASAMOS A LA SIGUIENTE POSICION
        JE CORRECTO ; SI HEMOS COMPARADO TODAS IMPRIMIMOS EL MENSAJE DE SALIDA CORRECTA
      CORRECTO: ; IMPRIMOS EL MENSAJE DE SALIDA CORRECTA POR PANTALLA
        MOV AH, 9
        MOV DX, OFFSET salidaCorrecta
        INT 21H
        JMP FIN ; SALTAMOS AL FIN DEL BUCLE PRINCIPAL
      ERROR: ; IMPRIMIMOS EL MENSAJE DE ERROR POR PANTALLA
        MOV AH, 9
        MOV DX, OFFSET errorRep
        INT 21H
        JMP FIN ; SALTAMOS AL FIN DEL BUCLE PRINCIPAL
      FIN: ; FIN DEL BUCLE PRINCIPAL
        ADD SI, 4
        CMP SI, 4*3 ; COMPROBAMOS SI HEMOS COMPARADO TODOS LOS VECTORES DE LA MATRIZ
        JNE BUCLE1 ; SI NO HEMOS COMPARADO TODOS PASAMOS AL SIGUIENTE VECTOR
        RET ; SI HEMOS COMPARADO TODOS RETORNAMOS
    COMPROBACION ENDP
    ; FIN DEL SEGMENTO DE CODIGO
CODE ENDS
; FIN DEL PROGRAMA INDICANDO DONDE COMIENZA LA EJECUCION
END INICIO
